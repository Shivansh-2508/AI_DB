"use client";
import { useEffect, useRef } from "react";
import { Loader2, Database, Bot, User } from "lucide-react";
import MessageBubble, { MessageBubbleProps } from "./MessageBubble";
import TableView from "./TableView";

export interface Message extends MessageBubbleProps {
  id: string;
  timestamp: Date;
  type?: "user" | "assistant" | "system" | "error";
  // optional structured results returned by backend
  results?: unknown;
  // optional SQL used/generated by AI
  sql?: string;
}

interface MessageListProps {
  messages: Message[];
  isLoading: boolean;
}

export default function MessageList({ messages, isLoading }: MessageListProps) {
  const bottomRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isLoading]);

  const getLoadingMessage = () => {
    const messages = [
      "Analyzing your query...",
      "Generating SQL...",
      "Executing query...",
      "Processing results...",
      "Thinking..."
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  };

  return (
    <div className="h-full overflow-y-auto">
      <div className="p-4 space-y-4">
        {messages.map((message) => {
          const isUser = message.isUser || message.type === "user";
          
          return (
            <div 
              key={message.id}
              className={`flex gap-3 ${isUser ? 'justify-end' : 'justify-start'}`}
            >
              {/* AI Icon - left side */}
              {!isUser && (
                <div className="flex-shrink-0 mt-1">
                  <div className="w-8 h-8 rounded-lg flex items-center justify-center" style={{ 
                    background: 'linear-gradient(135deg, #E91E63 0%, #14B8A6 100%)'
                  }}>
                    <Bot className="h-4 w-4 text-white" />
                  </div>
                </div>
              )}
              
              {/* Message Bubble */}
              <div className={`max-w-[70%] rounded-lg px-4 py-3 shadow-sm ${
                isUser 
                  ? 'rounded-br-sm' 
                  : 'rounded-bl-sm'
              }`} style={{
                backgroundColor: isUser ? '#E3F2FD' : '#FEFCF6',
                border: `1px solid ${isUser ? '#BBDEFB' : '#D3C3B9'}`
              }}>
                {/* Sender Label */}
                <div className="text-xs font-medium mb-1 opacity-70" style={{ 
                  color: '#162A2C' 
                }}>
                  {isUser ? 'You' : 'AI'}
                </div>
                
                {/* Message Content */}
                <div style={{ color: '#162A2C' }}>
                  <MessageBubble {...message} />
                </div>

                {/* Render structured results if available, otherwise try to parse JSON from text */}
                {message.results ? (
                  <div className="mt-2">
                    <TableView results={message.results} />
                    {message.sql && (
                      <pre className="mt-3 text-xs bg-[#0F1720] text-[#E6EEF6] p-2 rounded">
                        {String(message.sql)}
                      </pre>
                    )}
                  </div>
                ) : (() => {
                  // fallback: try to extract a JSON block from assistant text
                  try {
                    const jsonMatch = (message.text || "").match(/```json\n([\s\S]*?)```/i);
                    if (jsonMatch && jsonMatch[1]) {
                      const parsed = JSON.parse(jsonMatch[1]);
                      return (
                        <div className="mt-2">
                          <TableView results={parsed} />
                        </div>
                      );
                    }
                  } catch {
                    // ignore parse errors
                  }
                  return null;
                })()}
                
                {/* Timestamp */}
                <div className="text-xs mt-1 opacity-50" style={{ color: '#162A2C' }}>
                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
              </div>
              
              {/* User Icon - right side */}
              {isUser && (
                <div className="flex-shrink-0 mt-1">
                  <div className="w-8 h-8 rounded-lg border flex items-center justify-center" style={{ 
                    backgroundColor: '#FEFCF6',
                    borderColor: '#D3C3B9'
                  }}>
                    <User className="h-4 w-4" style={{ color: '#162A2C' }} />
                  </div>
                </div>
              )}
            </div>
          );
        })}

        {/* Loading indicator */}
        {isLoading && (
          <div className="flex justify-start gap-3">
            <div className="flex-shrink-0 mt-1">
              <div className="w-8 h-8 rounded-lg flex items-center justify-center" style={{ 
                background: 'linear-gradient(135deg, #E91E63 0%, #14B8A6 100%)'
              }}>
                <Bot className="h-4 w-4 text-white" />
              </div>
            </div>
            
            <div className="max-w-[70%] rounded-lg rounded-bl-sm px-4 py-3 shadow-sm" style={{
              backgroundColor: '#FEFCF6',
              border: '1px solid #D3C3B9'
            }}>
              <div className="flex items-center gap-2" style={{ color: '#162A2C' }}>
                <Loader2 className="h-4 w-4 animate-spin" style={{ color: '#14B8A6' }} />
                <span className="text-sm">{getLoadingMessage()}</span>
              </div>
              
              <div className="flex gap-1 mt-2">
                <div className="w-1 h-1 rounded-full animate-pulse" style={{ backgroundColor: '#14B8A6' }}></div>
                <div className="w-1 h-1 rounded-full animate-pulse" style={{ backgroundColor: '#14B8A6', animationDelay: '0.2s' }}></div>
                <div className="w-1 h-1 rounded-full animate-pulse" style={{ backgroundColor: '#14B8A6', animationDelay: '0.4s' }}></div>
              </div>
            </div>
          </div>
        )}

        {/* Empty state */}
        {messages.length === 0 && !isLoading && (
          <div className="flex flex-col items-center justify-center h-64 text-center">
            <div className="w-16 h-16 rounded-lg border flex items-center justify-center mb-4" style={{ 
              backgroundColor: '#FEFCF6',
              borderColor: '#D3C3B9'
            }}>
              <Database className="h-8 w-8" style={{ color: '#162A2C' }} />
            </div>
            <h3 className="text-lg font-medium mb-2" style={{ color: '#FEFCF6' }}>Ready to Query</h3>
            <p className="max-w-md text-sm leading-relaxed opacity-80" style={{ color: '#D3C3B9' }}>
              Ask me anything about your database. I can help you explore tables, run queries, and analyze your data with natural language.
            </p>
          </div>
        )}

        <div ref={bottomRef} />
      </div>
    </div>
  );
}